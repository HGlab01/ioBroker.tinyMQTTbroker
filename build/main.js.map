{
  "version": 3,
  "sources": ["../src/main.ts"],
  "sourcesContent": ["/*\r\n * Created with @iobroker/create-adapter v2.3.0\r\n */\r\n\r\n// The adapter-core module gives you access to the core ioBroker functions\r\n// you need to create an adapter\r\nimport * as utils from '@iobroker/adapter-core';\r\nimport Aedes from 'aedes';\r\nimport { createServer } from 'aedes-server-factory';\r\nimport portscanner from 'portscanner';\r\n\r\nclass Tinymqttbroker extends utils.Adapter {\r\n\taedes!: Aedes;\r\n\tserver!: any;\r\n\r\n\tpublic constructor(options: Partial<utils.AdapterOptions> = {}) {\r\n\t\tsuper({\r\n\t\t\t...options,\r\n\t\t\tname: 'tinymqttbroker',\r\n\t\t});\r\n\t\tthis.on('ready', this.onReady.bind(this));\r\n\t\t//this.on('stateChange', this.onStateChange.bind(this));\r\n\t\t// this.on('objectChange', this.onObjectChange.bind(this));\r\n\t\t// this.on('message', this.onMessage.bind(this));\r\n\t\tthis.on('unload', this.onUnload.bind(this));\r\n\t}\r\n\r\n\t/**\r\n\t * Is called when databases are connected and adapter received configuration.\r\n\t */\r\n\tprivate async onReady(): Promise<void> {\r\n\t\tconst serverPort: number = this.config.option1;\r\n\t\tconsole.log('Port ' + serverPort + ' is configured');\r\n\r\n\t\tportscanner.checkPortStatus(serverPort, '127.0.0.1', (error, status) => {\r\n\t\t\tconsole.log(`Portscanner result for port ${serverPort} is [${status}]`);\r\n\t\t\tthis.log.debug(`Portscanner result for port ${serverPort} is [${status}]`);\r\n\t\t\t// Status is 'open' if currently in use or 'closed' if available\r\n\t\t\tif (status == 'open') {\r\n\t\t\t\tthis.log.error(`Port ${serverPort} in use, please configure another port in adapter settings!`);\r\n\t\t\t\tthis.terminate ? this.terminate(utils.EXIT_CODES.INVALID_CONFIG_OBJECT) : process.exit(0);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.aedes = new Aedes();\r\n\t\t\t\tthis.aedes.id = 'iobroker_mqtt_broker_' + Math.floor(Math.random() * 100000 + 100000);\r\n\r\n\t\t\t\tthis.server = createServer(this.aedes);\r\n\t\t\t\tthis.server.listen(serverPort, () => {\r\n\t\t\t\t\tthis.log.info('MQTT-broker says: Server ' + this.aedes.id + ' started and listening on port ' + serverPort);\r\n\t\t\t\t})\r\n\r\n\t\t\t\t// emitted when a client connects to the broker\r\n\t\t\t\tthis.aedes.on('client', (client) => {\r\n\t\t\t\t\tthis.log.info(`MQTT-broker says: Client ${(client ? client.id : client)} connected to broker ${this.aedes.id}`);\r\n\t\t\t\t})\r\n\t\t\t\t// emitted when a client disconnects from the broker\r\n\t\t\t\tthis.aedes.on('clientDisconnect', (client) => {\r\n\t\t\t\t\tthis.log.info(`MQTT-broker says: Client ${(client ? client.id : client)} disconnected from the broker ${this.aedes.id}`);\r\n\t\t\t\t})\r\n\t\t\t\t// emitted when a client subscribes to a message topic\r\n\t\t\t\tthis.aedes.on('subscribe', (subscriptions, client) => {\r\n\t\t\t\t\tthis.log.debug(`MQTT-broker says: Client ${(client ? client.id : client)} subscribed to topic(s): ${subscriptions.map(s => s.topic).join(',')} on broker ${this.aedes.id}`);\r\n\t\t\t\t})\r\n\t\t\t\t// emitted when a client unsubscribes from a message topic\r\n\t\t\t\tthis.aedes.on('unsubscribe', (subscriptions, client) => {\r\n\t\t\t\t\tthis.log.debug(`MQTT-broker says: Client ${(client ? client.id : client)} unsubscribed from topic(s): ${subscriptions.join(',')} on broker ${this.aedes.id}`);\r\n\t\t\t\t})\r\n\t\t\t}\r\n\t\t})\r\n\t}\r\n\r\n\t/**\r\n\t * Is called when adapter shuts down - callback has to be called under any circumstances!\r\n\t */\r\n\tprivate onUnload(callback: () => void): void {\r\n\t\ttry {\r\n\t\t\tthis.aedes.close();\r\n\t\t\tthis.server.close();\r\n\t\t\tthis.log.info(`MQTT-broker says: I (${this.aedes.id}) stopped my service. See you soon!`);\r\n\t\t\tcallback();\r\n\t\t} catch (e) {\r\n\t\t\tcallback();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Is called if a subscribed state changes\r\n\t */\r\n\tprivate onStateChange(id: string, state: ioBroker.State | null | undefined): void {\r\n\t\tif (state) {\r\n\t\t\t// The state was changed\r\n\t\t\tthis.log.info(`state ${id} changed: ${state.val} (ack = ${state.ack})`);\r\n\t\t} else {\r\n\t\t\t// The state was deleted\r\n\t\t\tthis.log.info(`state ${id} deleted`);\r\n\t\t}\r\n\t}\r\n\r\n\terrorHandling(errorObject: any): void {\r\n\t\ttry {\r\n\t\t\tif (this.log.level != 'debug' && this.log.level != 'silly') {\r\n\t\t\t\tif (this.supportsFeature && this.supportsFeature('PLUGINS')) {\r\n\t\t\t\t\tconst sentryInstance = this.getPluginInstance('sentry');\r\n\t\t\t\t\tif (sentryInstance) {\r\n\t\t\t\t\t\tsentryInstance.getSentryObject().captureException(errorObject);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t} catch (error) {\r\n\t\t\tconsole.log(error);\r\n\t\t}\r\n\t}\r\n\r\n\tsendSentry(errorObject: any): void {\r\n\t\ttry {\r\n\t\t\tif (this.supportsFeature && this.supportsFeature('PLUGINS')) {\r\n\t\t\t\tconst sentryInstance = this.getPluginInstance('sentry');\r\n\t\t\t\tif (sentryInstance) {\r\n\t\t\t\t\tsentryInstance.getSentryObject().captureException(errorObject);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t} catch (error) {\r\n\t\t\tthis.log.error(`Error in function sendSentry(): ${error}`);\r\n\t\t}\r\n\t}\r\n}\r\n\r\nif (require.main !== module) {\r\n\t// Export the constructor in compact mode\r\n\tmodule.exports = (options: Partial<utils.AdapterOptions> | undefined) => new Tinymqttbroker(options);\r\n} else {\r\n\t// otherwise start the instance directly\r\n\t(() => new Tinymqttbroker())();\r\n}"],
  "mappings": "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",
  "names": ["portscanner", "Aedes"]
}
