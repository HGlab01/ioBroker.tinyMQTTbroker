{
  "version": 3,
  "sources": ["../src/main.ts"],
  "sourcesContent": ["/*\r\n * Created with @iobroker/create-adapter v2.3.0\r\n */\r\n\r\n// The adapter-core module gives you access to the core ioBroker functions\r\n// you need to create an adapter\r\nimport * as utils from '@iobroker/adapter-core';\r\nimport Aedes from 'aedes';\r\nimport { createServer } from 'aedes-server-factory';\r\n//const aedes = new Aedes();\r\n//aedes.id = 'iobroker_mqtt_broker_' + Math.floor(Math.random() * 100000 + 100000);\r\n//const server = createServer(aedes);\r\n\r\n\r\n// Load your modules here, e.g.:\r\n// import * as fs from \"fs\";\r\n\r\nclass Tinymqttbroker extends utils.Adapter {\r\n\taedes: Aedes;\r\n\tserver: any;\r\n\r\n\tpublic constructor(options: Partial<utils.AdapterOptions> = {}) {\r\n\t\tsuper({\r\n\t\t\t...options,\r\n\t\t\tname: 'tinymqttbroker',\r\n\t\t});\r\n\t\tthis.on('ready', this.onReady.bind(this));\r\n\t\t//this.on('stateChange', this.onStateChange.bind(this));\r\n\t\t// this.on('objectChange', this.onObjectChange.bind(this));\r\n\t\t// this.on('message', this.onMessage.bind(this));\r\n\t\tthis.on('unload', this.onUnload.bind(this));\r\n\t\tthis.aedes = new Aedes();\r\n\t\tthis.aedes.id = 'iobroker_mqtt_broker_' + Math.floor(Math.random() * 100000 + 100000);\r\n\t\tthis.server = createServer(this.aedes);\r\n\t}\r\n\r\n\t/**\r\n\t * Is called when databases are connected and adapter received configuration.\r\n\t */\r\n\tprivate async onReady(): Promise<void> {\r\n\t\tconst port: number = this.config.option1;\r\n\t\tthis.server.listen(port, () => {\r\n\t\t\tthis.log.info('MQTT broker says: Server ' + this.aedes.id + ' started and listening on port ' + port);\r\n\t\t})\r\n\r\n\t\t// emitted when a client connects to the broker\r\n\t\tthis.aedes.on('client', (client) => {\r\n\t\t\tthis.log.info(`MQTT broker says: Client connected : MQTT Client ${(client ? client.id : client)} connected to aedes broker ${this.aedes.id}`);\r\n\t\t})\r\n\t\t// emitted when a client disconnects from the broker\r\n\t\tthis.aedes.on('clientDisconnect', (client) => {\r\n\t\t\tthis.log.info(`MQTT broker says: Client disconnected : MQTT Client ${(client ? client.id : client)} disconnected from the aedes broker ${this.aedes.id}`);\r\n\t\t})\r\n\t}\r\n\r\n\t/**\r\n\t * Is called when adapter shuts down - callback has to be called under any circumstances!\r\n\t */\r\n\tprivate onUnload(callback: () => void): void {\r\n\t\ttry {\r\n\t\t\t// Here you must clear all timeouts or intervals that may still be active\r\n\t\t\t// clearTimeout(timeout1);\r\n\t\t\t// clearTimeout(timeout2);\r\n\t\t\t// ...\r\n\t\t\t// clearInterval(interval1);\r\n\r\n\t\t\tthis.aedes.close();\r\n\t\t\tthis.server.close();\r\n\r\n\t\t\tcallback();\r\n\t\t} catch (e) {\r\n\t\t\tcallback();\r\n\t\t}\r\n\t}\r\n\r\n\t// If you need to react to object changes, uncomment the following block and the corresponding line in the constructor.\r\n\t// You also need to subscribe to the objects with `this.subscribeObjects`, similar to `this.subscribeStates`.\r\n\t// /**\r\n\t//  * Is called if a subscribed object changes\r\n\t//  */\r\n\t// private onObjectChange(id: string, obj: ioBroker.Object | null | undefined): void {\r\n\t// \tif (obj) {\r\n\t// \t\t// The object was changed\r\n\t// \t\tthis.log.info(`object ${id} changed: ${JSON.stringify(obj)}`);\r\n\t// \t} else {\r\n\t// \t\t// The object was deleted\r\n\t// \t\tthis.log.info(`object ${id} deleted`);\r\n\t// \t}\r\n\t// }\r\n\r\n\t/**\r\n\t * Is called if a subscribed state changes\r\n\t */\r\n\tprivate onStateChange(id: string, state: ioBroker.State | null | undefined): void {\r\n\t\tif (state) {\r\n\t\t\t// The state was changed\r\n\t\t\tthis.log.info(`state ${id} changed: ${state.val} (ack = ${state.ack})`);\r\n\t\t} else {\r\n\t\t\t// The state was deleted\r\n\t\t\tthis.log.info(`state ${id} deleted`);\r\n\t\t}\r\n\t}\r\n\r\n\t// If you need to accept messages in your adapter, uncomment the following block and the corresponding line in the constructor.\r\n\t// /**\r\n\t//  * Some message was sent to this instance over message box. Used by email, pushover, text2speech, ...\r\n\t//  * Using this method requires \"common.messagebox\" property to be set to true in io-package.json\r\n\t//  */\r\n\t// private onMessage(obj: ioBroker.Message): void {\r\n\t// \tif (typeof obj === 'object' && obj.message) {\r\n\t// \t\tif (obj.command === 'send') {\r\n\t// \t\t\t// e.g. send email or pushover or whatever\r\n\t// \t\t\tthis.log.info('send command');\r\n\r\n\t// \t\t\t// Send response in callback if required\r\n\t// \t\t\tif (obj.callback) this.sendTo(obj.from, obj.command, 'Message received', obj.callback);\r\n\t// \t\t}\r\n\t// \t}\r\n\t// }\r\n\r\n}\r\n\r\nif (require.main !== module) {\r\n\t// Export the constructor in compact mode\r\n\tmodule.exports = (options: Partial<utils.AdapterOptions> | undefined) => new Tinymqttbroker(options);\r\n} else {\r\n\t// otherwise start the instance directly\r\n\t(() => new Tinymqttbroker())();\r\n}"],
  "mappings": ";;;;;;;;;;;;;;;;;;;AAMA,YAAuB;AACvB,mBAAkB;AAClB,kCAA6B;AAS7B,MAAM,uBAAuB,MAAM,QAAQ;AAAA,EAInC,YAAY,UAAyC,CAAC,GAAG;AAC/D,UAAM;AAAA,MACL,GAAG;AAAA,MACH,MAAM;AAAA,IACP,CAAC;AACD,SAAK,GAAG,SAAS,KAAK,QAAQ,KAAK,IAAI,CAAC;AAIxC,SAAK,GAAG,UAAU,KAAK,SAAS,KAAK,IAAI,CAAC;AAC1C,SAAK,QAAQ,IAAI,aAAAA,QAAM;AACvB,SAAK,MAAM,KAAK,0BAA0B,KAAK,MAAM,KAAK,OAAO,IAAI,MAAS,GAAM;AACpF,SAAK,aAAS,0CAAa,KAAK,KAAK;AAAA,EACtC;AAAA,EAKA,MAAc,UAAyB;AACtC,UAAM,OAAe,KAAK,OAAO;AACjC,SAAK,OAAO,OAAO,MAAM,MAAM;AAC9B,WAAK,IAAI,KAAK,8BAA8B,KAAK,MAAM,KAAK,oCAAoC,IAAI;AAAA,IACrG,CAAC;AAGD,SAAK,MAAM,GAAG,UAAU,CAAC,WAAW;AACnC,WAAK,IAAI,KAAK,oDAAqD,SAAS,OAAO,KAAK,oCAAqC,KAAK,MAAM,IAAI;AAAA,IAC7I,CAAC;AAED,SAAK,MAAM,GAAG,oBAAoB,CAAC,WAAW;AAC7C,WAAK,IAAI,KAAK,uDAAwD,SAAS,OAAO,KAAK,6CAA8C,KAAK,MAAM,IAAI;AAAA,IACzJ,CAAC;AAAA,EACF;AAAA,EAKQ,SAAS,UAA4B;AAC5C,QAAI;AAOH,WAAK,MAAM,MAAM;AACjB,WAAK,OAAO,MAAM;AAElB,eAAS;AAAA,IACV,SAAS,GAAP;AACD,eAAS;AAAA,IACV;AAAA,EACD;AAAA,EAoBQ,cAAc,IAAY,OAAgD;AACjF,QAAI,OAAO;AAEV,WAAK,IAAI,KAAK,SAAS,eAAe,MAAM,cAAc,MAAM,MAAM;AAAA,IACvE,OAAO;AAEN,WAAK,IAAI,KAAK,SAAS,YAAY;AAAA,IACpC;AAAA,EACD;AAmBD;AAEA,IAAI,QAAQ,SAAS,QAAQ;AAE5B,SAAO,UAAU,CAAC,YAAuD,IAAI,eAAe,OAAO;AACpG,OAAO;AAEN,GAAC,MAAM,IAAI,eAAe,GAAG;AAC9B;",
  "names": ["Aedes"]
}
