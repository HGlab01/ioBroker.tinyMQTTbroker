{
  "version": 3,
  "sources": ["../src/main.ts"],
  "sourcesContent": ["/*\r\n * Created with @iobroker/create-adapter v2.3.0\r\n */\r\n\r\n// The adapter-core module gives you access to the core ioBroker functions\r\n// you need to create an adapter\r\nimport * as utils from '@iobroker/adapter-core';\r\nimport Aedes from 'aedes';\r\nimport { createServer } from 'aedes-server-factory';\r\nimport portscanner from 'portscanner';\r\n\r\nconst jsonExplorer:any = require('iobroker-jsonexplorer');\r\nconst { version } = require('../package.json');\r\n\r\nclass Tinymqttbroker extends utils.Adapter {\r\n    aedes!: Aedes;\r\n    server!: any;\r\n\r\n    public constructor(options: Partial<utils.AdapterOptions> = {}) {\r\n        super({\r\n            ...options,\r\n            name: 'tinymqttbroker',\r\n        });\r\n        this.on('ready', this.onReady.bind(this));\r\n        //this.on('stateChange', this.onStateChange.bind(this));\r\n        // this.on('objectChange', this.onObjectChange.bind(this));\r\n        // this.on('message', this.onMessage.bind(this));\r\n        this.on('unload', this.onUnload.bind(this));\r\n        jsonExplorer.init(this, {});\r\n    }\r\n\r\n    /**\r\n\t * Is called when databases are connected and adapter received configuration.\r\n\t */\r\n    private async onReady(): Promise<void> {\r\n        jsonExplorer.sendVersionInfo(version);\r\n        const serverPort: number = this.config.option1;\r\n        console.log('Port ' + serverPort + ' is configured');\r\n\r\n        portscanner.checkPortStatus(serverPort, '127.0.0.1', (error, status) => {\r\n            console.log(`Portscanner result for port ${serverPort} is [${status}]`);\r\n            this.log.debug(`Portscanner result for port ${serverPort} is [${status}]`);\r\n            // Status is 'open' if currently in use or 'closed' if available\r\n            if (status == 'open') {\r\n                this.log.error(`Port ${serverPort} in use, please configure another port in adapter settings!`);\r\n                const end = this.terminate ? this.terminate(utils.EXIT_CODES.INVALID_CONFIG_OBJECT) : process.exit(0);\r\n                return end;\r\n            }\r\n            else {\r\n                this.aedes = new Aedes();\r\n                this.aedes.id = 'iobroker_mqtt_broker_' + Math.floor(Math.random() * 100000 + 100000);\r\n\r\n                this.server = createServer(this.aedes);\r\n                this.server.listen(serverPort, () => {\r\n                    this.log.info('MQTT-broker says: Server ' + this.aedes.id + ' started and listening on port ' + serverPort);\r\n                });\r\n\r\n                // emitted when a client connects to the broker\r\n                this.aedes.on('client', (client) => {\r\n                    this.log.info(`MQTT-broker says: Client ${(client ? client.id : client)} connected to broker ${this.aedes.id}`);\r\n                });\r\n                // emitted when a client disconnects from the broker\r\n                this.aedes.on('clientDisconnect', (client) => {\r\n                    this.log.info(`MQTT-broker says: Client ${(client ? client.id : client)} disconnected from the broker ${this.aedes.id}`);\r\n                });\r\n                // emitted when a client subscribes to a message topic\r\n                this.aedes.on('subscribe', (subscriptions, client) => {\r\n                    this.log.debug(`MQTT-broker says: Client ${(client ? client.id : client)} subscribed to topic(s): ${subscriptions.map(s => s.topic).join(',')} on broker ${this.aedes.id}`);\r\n                });\r\n                // emitted when a client unsubscribes from a message topic\r\n                this.aedes.on('unsubscribe', (subscriptions, client) => {\r\n                    this.log.debug(`MQTT-broker says: Client ${(client ? client.id : client)} unsubscribed from topic(s): ${subscriptions.join(',')} on broker ${this.aedes.id}`);\r\n                });\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n\t * Is called when adapter shuts down - callback has to be called under any circumstances!\r\n\t */\r\n    private onUnload(callback: () => void): void {\r\n        try {\r\n            this.aedes.close();\r\n            this.server.close();\r\n            this.log.info(`MQTT-broker says: I (${this.aedes.id}) stopped my service. See you soon!`);\r\n            callback();\r\n        } catch {\r\n            callback();\r\n        }\r\n    }\r\n\r\n    /**\r\n\t * Is called if a subscribed state changes\r\n\t */\r\n    private onStateChange(id: string, state: ioBroker.State | null | undefined): void {\r\n        if (state) {\r\n            // The state was changed\r\n            this.log.info(`state ${id} changed: ${state.val} (ack = ${state.ack})`);\r\n        } else {\r\n            // The state was deleted\r\n            this.log.info(`state ${id} deleted`);\r\n        }\r\n    }\r\n\r\n    errorHandling(errorObject: any): void {\r\n        try {\r\n            if (this.log.level != 'debug' && this.log.level != 'silly') {\r\n                if (this.supportsFeature && this.supportsFeature('PLUGINS')) {\r\n                    const sentryInstance = this.getPluginInstance('sentry');\r\n                    if (sentryInstance) {\r\n                        sentryInstance.getSentryObject().captureException(errorObject);\r\n                    }\r\n                }\r\n            }\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    sendSentry(errorObject: any): void {\r\n        try {\r\n            if (this.supportsFeature && this.supportsFeature('PLUGINS')) {\r\n                const sentryInstance = this.getPluginInstance('sentry');\r\n                if (sentryInstance) {\r\n                    sentryInstance.getSentryObject().captureException(errorObject);\r\n                }\r\n            }\r\n        } catch (error) {\r\n            this.log.error(`Error in function sendSentry(): ${error}`);\r\n        }\r\n    }\r\n}\r\n\r\nif (require.main !== module) {\r\n    // Export the constructor in compact mode\r\n    module.exports = (options: Partial<utils.AdapterOptions> | undefined) => new Tinymqttbroker(options);\r\n} else {\r\n    // otherwise start the instance directly\r\n    (() => new Tinymqttbroker())();\r\n}"],
  "mappings": "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",
  "names": ["portscanner", "Aedes"]
}
