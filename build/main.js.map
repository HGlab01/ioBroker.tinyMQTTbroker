{
  "version": 3,
  "sources": ["../src/main.ts"],
  "sourcesContent": ["/*\n * Created with @iobroker/create-adapter v2.3.0\n */\n\n// The adapter-core module gives you access to the core ioBroker functions\n// you need to create an adapter\nimport * as utils from '@iobroker/adapter-core';\nimport Aedes from 'aedes';\nimport { createServer } from 'aedes-server-factory';\nimport portscanner from 'portscanner';\n\n// eslint-disable-next-line @typescript-eslint/no-require-imports\nconst jsonExplorer: any = require('iobroker-jsonexplorer');\n// eslint-disable-next-line @typescript-eslint/no-require-imports\nconst { version } = require('../package.json');\n\nclass Tinymqttbroker extends utils.Adapter {\n    aedes!: Aedes;\n    server!: any;\n\n    public constructor(options: Partial<utils.AdapterOptions> = {}) {\n        super({\n            ...options,\n            name: 'tinymqttbroker',\n        });\n        this.on('ready', this.onReady.bind(this));\n        //this.on('stateChange', this.onStateChange.bind(this));\n        // this.on('objectChange', this.onObjectChange.bind(this));\n        // this.on('message', this.onMessage.bind(this));\n        this.on('unload', this.onUnload.bind(this));\n        jsonExplorer.init(this, {});\n    }\n\n    /**\n     * Is called when databases are connected and adapter received configuration.\n     */\n    private async onReady(): Promise<void> {\n        jsonExplorer.sendVersionInfo(version);\n        const serverPort: number = this.config.option1;\n        console.log(`Port ${serverPort} is configured`);\n\n        const resultPortScanner = await portscanner.checkPortStatus(serverPort);\n\n        if (resultPortScanner == 'open') {\n            this.log.error(`Port ${serverPort} is already in use. Please configure another port in adapter settings!`);\n            const end = this.terminate ? this.terminate(utils.EXIT_CODES.INVALID_CONFIG_OBJECT) : process.exit(0);\n            return end;\n        }\n\n        try {\n            this.aedes = new Aedes();\n            this.aedes.id = `iobroker_mqtt_broker_${Math.floor(Math.random() * 100000 + 100000)}`;\n\n            this.server = createServer(this.aedes);\n\n            this.server.on('error', (error: any) => {\n                if (error?.code === 'EADDRINUSE') {\n                    this.log.error(`Port ${serverPort} is already in use. Cannot start MQTT broker.`);\n                    const end = this.terminate\n                        ? this.terminate(utils.EXIT_CODES.INVALID_CONFIG_OBJECT)\n                        : process.exit(0);\n                    return end;\n                }\n                this.log.error(`An error occurred while starting the MQTT broker ${error}`);\n                const end = this.terminate ? this.terminate(utils.EXIT_CODES.INVALID_CONFIG_OBJECT) : process.exit(0);\n                return end;\n            });\n\n            this.server.listen(serverPort, () => {\n                this.log.info(`MQTT-broker says: Server ${this.aedes.id} started and listening on port ${serverPort}`);\n            });\n\n            // emitted when a client connects to the broker\n            this.aedes.on('client', client => {\n                this.log.info(\n                    `MQTT-broker says: Client ${client ? client.id : client} connected to broker ${this.aedes.id}`,\n                );\n            });\n            // emitted when a client disconnects from the broker\n            this.aedes.on('clientDisconnect', client => {\n                this.log.info(\n                    `MQTT-broker says: Client ${client ? client.id : client} disconnected from the broker ${this.aedes.id}`,\n                );\n            });\n            // emitted when a client subscribes to a message topic\n            this.aedes.on('subscribe', (subscriptions, client) => {\n                this.log.debug(\n                    `MQTT-broker says: Client ${client ? client.id : client} subscribed to topic(s): ${subscriptions.map(s => s.topic).join(',')} on broker ${this.aedes.id}`,\n                );\n            });\n            // emitted when a client unsubscribes from a message topic\n            this.aedes.on('unsubscribe', (subscriptions, client) => {\n                this.log.debug(\n                    `MQTT-broker says: Client ${client ? client.id : client} unsubscribed from topic(s): ${subscriptions.join(',')} on broker ${this.aedes.id}`,\n                );\n            });\n        } catch (error) {\n            this.log.error(`${String(error)}`);\n            console.error(`${String(error)}`);\n            const end = this.terminate ? this.terminate(utils.EXIT_CODES.INVALID_CONFIG_OBJECT) : process.exit(0);\n            return end;\n        }\n    }\n\n    /**\n     * Is called when adapter shuts down - callback has to be called under any circumstances!\n     *\n     * @param callback is called under any circumstances after stopping the adapter\n     */\n    private onUnload(callback: () => void): void {\n        try {\n            this.aedes.close();\n            this.server.close();\n            this.log.info(`MQTT-broker says: I (${this.aedes.id}) stopped my service. See you soon!`);\n            callback();\n        } catch {\n            callback();\n        }\n    }\n\n    /**\n     * Is called if a subscribed state changes\n     *\n     * @param id is the ID of the state that changed\n     * @param state is the state that changed\n     */\n    private onStateChange(id: string, state: ioBroker.State | null | undefined): void {\n        if (state) {\n            // The state was changed\n            this.log.info(`state ${id} changed: ${state.val} (ack = ${state.ack})`);\n        } else {\n            // The state was deleted\n            this.log.info(`state ${id} deleted`);\n        }\n    }\n\n    errorHandling(errorObject: any): void {\n        try {\n            if (this.log.level != 'debug' && this.log.level != 'silly') {\n                if (this.supportsFeature && this.supportsFeature('PLUGINS')) {\n                    const sentryInstance = this.getPluginInstance('sentry');\n                    if (sentryInstance) {\n                        sentryInstance.getSentryObject().captureException(errorObject);\n                    }\n                }\n            }\n        } catch (error) {\n            console.log(error);\n        }\n    }\n\n    sendSentry(errorObject: any): void {\n        try {\n            if (this.supportsFeature && this.supportsFeature('PLUGINS')) {\n                const sentryInstance = this.getPluginInstance('sentry');\n                if (sentryInstance) {\n                    sentryInstance.getSentryObject().captureException(errorObject);\n                }\n            }\n        } catch (error) {\n            this.log.error(`Error in function sendSentry(): ${String(error)}`);\n        }\n    }\n}\n\nif (require.main !== module) {\n    // Export the constructor in compact mode\n    module.exports = (options: Partial<utils.AdapterOptions> | undefined) => new Tinymqttbroker(options);\n} else {\n    // otherwise start the instance directly\n    (() => new Tinymqttbroker())();\n}\n"],
  "mappings": "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",
  "names": ["portscanner", "Aedes", "end"]
}
